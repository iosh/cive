diff --git a/src/address.ts b/src/address.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d788ae55d1b2771954a697a32e1a4fd7f0500a5b
--- /dev/null
+++ b/src/address.ts
@@ -0,0 +1,76 @@
+export type mainNetworkNameType = "cfx";
+export type testNetworkNameType = "cfxtest";
+export type otherNetworkNameType = "net";
+export type mainNetworkIdType = 1029;
+export type testNetworkIdType = 1;
+
+export type NetworkNameType =
+  | mainNetworkNameType
+  | testNetworkNameType
+  | `${otherNetworkNameType}${number}`;
+
+export type AddressTypeUser = "user";
+export type AddressTypeContract = "contract";
+export type AddressTypeBuiltin = "builtin";
+export type AddressTypeNull = "null";
+
+export type AddressType =
+  | AddressTypeUser
+  | AddressTypeContract
+  | AddressTypeBuiltin
+  | AddressTypeNull;
+
+type SingleNetworkTypeName<
+  T extends mainNetworkNameType | testNetworkNameType | otherNetworkNameType,
+  Upcase extends boolean | undefined = undefined
+> = Upcase extends undefined ? T : Uppercase<T>;
+
+type NetworkName<
+  TNetworkId extends number | undefined = undefined,
+  Upcase extends boolean | undefined = undefined
+> = TNetworkId extends undefined
+  ?
+      | SingleNetworkTypeName<mainNetworkNameType, Upcase>
+      | SingleNetworkTypeName<testNetworkNameType, Upcase>
+      | `${SingleNetworkTypeName<
+          otherNetworkNameType,
+          Upcase
+        >}${TNetworkId extends undefined ? string : TNetworkId}`
+  : TNetworkId extends mainNetworkIdType
+  ? SingleNetworkTypeName<mainNetworkNameType, Upcase>
+  : TNetworkId extends testNetworkIdType
+  ? SingleNetworkTypeName<testNetworkNameType, Upcase>
+  : `${SingleNetworkTypeName<
+      otherNetworkNameType,
+      Upcase
+    >}${TNetworkId extends undefined ? string : TNetworkId}`;
+
+type FullAddressType<
+  TNetworkId extends number | undefined = undefined,
+  TAddressType extends AddressType | undefined = undefined
+> = `${NetworkName<
+  TNetworkId,
+  true
+>}:${Uppercase<`TYPE.${TAddressType extends undefined
+  ? AddressType
+  : TAddressType extends AddressTypeUser
+  ? Uppercase<AddressTypeUser>
+  : TAddressType extends AddressTypeContract
+  ? Uppercase<AddressTypeContract>
+  : TAddressType extends AddressTypeBuiltin
+  ? Uppercase<AddressTypeBuiltin>
+  : TAddressType extends AddressTypeNull
+  ? Uppercase<AddressTypeNull>
+  : never}`>}:${string}`;
+
+export type Address<
+  TNetworkId extends number | undefined = undefined,
+  TAddressType extends AddressType | undefined = undefined,
+  TVerbose extends boolean | undefined = undefined
+> = TVerbose extends undefined
+  ?
+      | FullAddressType<TNetworkId, TAddressType>
+      | `${NetworkName<TNetworkId>}:${string}`
+  : TVerbose extends true
+  ? FullAddressType<TNetworkId, TAddressType>
+  : `${NetworkName<TNetworkId>}:${string}`;
diff --git a/src/register.ts b/src/register.ts
index 4f29120e7150c9d3d519c233ddf000af26021af1..f693175e4f36445aa3149c62479db6341d1fdf20 100644
--- a/src/register.ts
+++ b/src/register.ts
@@ -1,4 +1,5 @@
 // biome-ignore lint/suspicious/noEmptyInterface: <explanation>
+import {Address} from './address'
 export interface Register {}
 
 // TODO: Remove deprecated properties next major version
@@ -12,6 +13,12 @@ export type ResolvedRegister = {
     : Register extends { AddressType: infer type }
       ? type
       : DefaultRegister['addressType']
+
+  HexAddressType: Register extends { HexAddressType: infer type }
+      ? type
+      : Register extends { HexAddressType: infer type }
+        ? type
+        : DefaultRegister['HexAddressType']
   /**
    * TypeScript type to use for `int<M>` and `uint<M>` values, where `M > 48`
    * @default bigint
@@ -129,7 +136,9 @@ export type DefaultRegister = {
   fixedArrayMaxLength: 99
 
   /** TypeScript type to use for `address` values */
-  addressType: `0x${string}`
+  addressType: Address
+
+  HexAddressType: `0x${string}`
   /** TypeScript type to use for `bytes` values */
   bytesType: {
     /** TypeScript type to use for `bytes` input values */
