import { getAddress as getHexAddress, isAddressEqual } from 'viem'
import type { Address } from '../../accounts/types.js'
import type {
  ByteArray,
  Hex,
  SignableMessage,
  Signature,
} from '../../types/misc.js'
import { base32AddressToHex } from '../address/base32AddressToHex.js'
import { recoverMessageAddress } from './recoverMessageAddress.js'

export type VerifyMessageParameters = {
  /** The address that signed the original message. */
  address: Address
  /** The message to be verified. */
  message: SignableMessage
  /** The signature that was generated by signing the message with the address's private key. */
  signature: Hex | ByteArray | Signature
}

export type VerifyMessageReturnType = boolean
export async function verifyMessage({
  address,
  message,
  signature,
}: VerifyMessageParameters): Promise<VerifyMessageReturnType> {
  return isAddressEqual(
    getHexAddress(base32AddressToHex({ address: address })),
    await recoverMessageAddress({ message, signature }),
  )
}
